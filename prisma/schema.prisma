generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  username   String     @unique
  verifiedAt DateTime?  @map("email_verified")
  isVerified Boolean    @default(false)
  avatarUrl  String?
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @updatedAt @map(name: "updated_at")
  banned     Boolean    @default(false)
  posts      Post[]
  postFlags  PostFlag[]
  followers  Follows[]  @relation("following")
  following  Follows[]  @relation("follower")
  likes      PostLike[]
  comments   Comment[]
  isBot      Boolean    @default(false)

  Media Media[]
  @@index(username)
  @@map(name: "user")
}

// create a model for followers and following with their avatar url
model Follows {
  follower           User    @relation("follower", fields: [followerId], references: [id])
  followerId         String
  folowerAvatarUrl   String?
  followingId        String
  following          User    @relation("following", fields: [followingId], references: [id])
  followingAvatarUrl String?

  @@id([followerId, followingId])
  @@map(name: "follows")
}

model Post {
  id            String       @id @default(cuid())
  title         String
  content       String?
  published     Boolean      @default(true)
  userId        String
  username      String
  userAvatarUrl String
  userDeleted   Boolean      @default(false)
  flagged       Boolean      @default(false)
  deleted       Boolean      @default(false)
  flagCount     Int          @default(0)
  postFlags     PostFlag[]
  viewCount     Int          @default(0)
  likes         Int          @default(0)
  mediaType     String?
  mediaUrl      String?      @unique
  mediaId       String
  isShared      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  isBotPost     Boolean      @default(false)
  media         Media        @relation(fields: [mediaId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  postLikes     PostLike[]
  tags          TagOnPosts[]
  comments      Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Media {
  id        String   @id // should be generated by server as nanoid
  url       String   @unique
  userId    String
  bucket    String
  type      String
  size      Int
  category  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  posts     Post[]
  user      User     @relation(fields: [userId], references: [id])

  @@map("media")
}

enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

model PostFlag {
  postId    String
  userId    String
  reason    FlagReason
  content   String?
  createdAt DateTime   @default(now())
  post      Post       @relation(fields: [postId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("post_flags")
}

model PostLike {
  postId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  doesLike  Boolean  @default(true)

  @@id([postId, userId])
  @@map("post_likes")
}

model TagOnPosts {
  post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId String
  tagId  String

  @@id([postId, tagId])
  @@map("post_tags")
}

model Tag {
  id    String       @id @default(cuid())
  name  String       @unique
  posts TagOnPosts[]

  @@map("tags")
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }

// model Account {
//   id                 Int     @id @default(autoincrement())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?
//   // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           Int      @id @default(autoincrement())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
// user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

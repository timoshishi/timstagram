generator client {
  provider = "prisma-client-js"
}
generator erd {
  provider = "prisma-erd-generator"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Profile {
  id         String     @id
  username   String     @unique
  verifiedAt DateTime?  @map("email_verified")
  avatarUrl  String?    @map("avatar_url")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  banned     Boolean    @default(false)
  isBot      Boolean    @default(false) @map("is_bot")
  email      String
  comments   Comment[]
  following  Follows[]  @relation("follower")
  followers  Follows[]  @relation("following")
  media      Media[]
  postFlags  PostFlag[]
  likes      PostLike[]
  posts      Post[]

  @@index([username])
  @@map("profile")
}

model Follows {
  followerId         String  @map("follower_id")
  folowerAvatarUrl   String? @map("follower_avatar_url")
  followingId        String  @map("following_id")
  followingAvatarUrl String? @map("following_avatar_url")
  follower           Profile    @relation("follower", fields: [followerId], references: [id])
  following          Profile    @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@map("follows")
}

model Post {
  id            String       @id @default(cuid())
  postBody      String?      @map("post_body")
  published     Boolean      @default(true)
  profileId        String       @map("user_id")
  userDeleted   Boolean      @default(false) @map("user_deleted")
  flagged       Boolean      @default(false)
  deleted       Boolean      @default(false)
  flagCount     Int          @default(0) @map("flag_count")
  viewCount     Int          @default(0) @map("view_count")
  likes         Int          @default(0)
  mediaType     String?      @map("media_type")
  mediaUrl      String?      @unique @map("media_url")
  mediaId       String       @map("media_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  isBotPost     Boolean      @default(false) @map("is_bot_post")
  isShared      Boolean      @default(false) @map("is_shared")
  userAvatarUrl String       @map("user_avatar_url")
  username      String
  media         Media        @relation(fields: [mediaId], references: [id])
  profile          Profile         @relation(fields: [profileId], references: [id])
  comments      Comment[]
  postFlags     PostFlag[]
  postLikes     PostLike[]
  tags          TagOnPosts[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  profileId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile      Profile     @relation(fields: [profileId], references: [id])

  @@map("comments")
}

model Media {
  id        String   @id
  url       String   @unique
  bucket    String
  type      String
  alt       String?
  size      Int
  width     Int
  height    Int
  aspectRatio Float  @map("aspect_ratio")
  scraped   Boolean  @default(false)
  category  String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  profileId    String   @map("user_id")
  hash      String
  metadata  Json?
  source    String
  profile      Profile     @relation(fields: [profileId], references: [id])
  posts     Post[]
  tags      Tag[]

  @@map("media")
}

model PostFlag {
  postId    String
  profileId    String
  reason    FlagReason
  content   String?
  createdAt DateTime   @default(now()) @map("created_at")
  post      Post       @relation(fields: [postId], references: [id])
  profile      Profile       @relation(fields: [profileId], references: [id])

  @@id([postId, profileId])
  @@map("post_flags")
}

model PostLike {
  postId    String   @map("post_id")
  profileId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  doesLike  Boolean  @default(true)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
  @@map("post_likes")
}

model TagOnPosts {
  postId String @map("post_id")
  tagId  String @map("tag_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Tag {
  id      String       @id @default(cuid())
  name    String       @unique
  mediaId String?      @map("media_id")
  media   Media?       @relation(fields: [mediaId], references: [id])
  posts   TagOnPosts[]

  @@map("tags")
}

enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

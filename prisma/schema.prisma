generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  username   String     @unique
  verifiedAt DateTime?  @map("email_verified")
  isVerified Boolean    @default(false)
  avatarUrl  String?
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  banned     Boolean    @default(false)
  isBot      Boolean    @default(false)
  email      String
  comments   Comment[]
  following  Follows[]  @relation("follower")
  followers  Follows[]  @relation("following")
  Media      Media[]
  postFlags  PostFlag[]
  likes      PostLike[]
  posts      Post[]

  @@index([username])
  @@map("user")
}

model Follows {
  followerId         String
  folowerAvatarUrl   String?
  followingId        String
  followingAvatarUrl String?
  follower           User    @relation("follower", fields: [followerId], references: [id])
  following          User    @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@map("follows")
}

model Post {
  id            String       @id @default(cuid())
  title         String
  content       String?
  published     Boolean      @default(true)
  userId        String
  userDeleted   Boolean      @default(false)
  flagged       Boolean      @default(false)
  deleted       Boolean      @default(false)
  flagCount     Int          @default(0)
  viewCount     Int          @default(0)
  likes         Int          @default(0)
  mediaType     String?
  mediaUrl      String?      @unique
  mediaId       String
  createdAt     DateTime     @default(now())
  isBotPost     Boolean      @default(false)
  isShared      Boolean      @default(false)
  userAvatarUrl String
  username      String
  media         Media        @relation(fields: [mediaId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  comments      Comment[]
  postFlags     PostFlag[]
  postLikes     PostLike[]
  tags          TagOnPosts[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Media {
  id        String   @id
  url       String   @unique
  bucket    String?
  type      String?
  size      Int?
  category  String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String 
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id])
  posts     Post[]
  tags      Tag[]
  @@map("media")
}

model PostFlag {
  postId    String
  userId    String
  reason    FlagReason
  content   String?
  createdAt DateTime   @default(now())
  post      Post       @relation(fields: [postId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("post_flags")
}

model PostLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  doesLike  Boolean  @default(true)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("post_likes")
}

model TagOnPosts {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Tag {
  id    String       @id @default(cuid())
  name  String       @unique
  posts TagOnPosts[]

  @@map("tags")
  Media   Media?  @relation(fields: [mediaId], references: [id])
  mediaId String?
}

enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

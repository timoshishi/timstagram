datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "orderByNulls"]
}

generator erd {
  provider = "prisma-erd-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// profile created with postgres function after user creation
// username inserted in signup modal
model Profile {
  id             String     @id @unique @db.Uuid()
  username       String     @unique
  avatarUrl      String     @default("") @map("avatar_url")
  avatarId       String?    @map("avatar_id") @db.Uuid()
  avatarBucket   String?    @default("") @map("avatar_bucket")
  avatarDomain   String?    @default("") @map("avatar_domain")
  avatarFilename String?    @unique @map("avatar_filename")
  bio            String     @default("") @map("bio")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime?  @updatedAt @map("updated_at")
  banned         Boolean    @default(false)
  isBot          Boolean    @default(false) @map("is_bot")
  comments       Comment[]
  followers      Profile[]  @relation("UserFollows")
  following      Profile[]  @relation("UserFollows")
  postFlags      PostFlag[]
  likes          PostLike[]
  posts          Post[]
  mediaId        Media[]

  @@index([username])
  @@map("profiles")
}

model Post {
  id         String     @id @default(uuid()) @db.Uuid()
  postBody   String     @map("post_body")
  published  Boolean    @default(true)
  authorId   String     @map("author_id") @db.Uuid()
  flagged    Boolean    @default(false)
  deleted    Boolean    @default(false)
  flagCount  Int        @default(0) @map("flag_count")
  viewCount  Int        @default(1) @map("view_count")
  filename   String     @unique @map("filename")
  createdAt  DateTime   @default(now()) @map("created_at")
  postHash   String     @unique
  postHashId PostHash   @relation(fields: [postHash], references: [postHash])
  profile    Profile    @relation(fields: [authorId], references: [id])
  comments   Comment[]
  postFlags  PostFlag[]
  postLikes  PostLike[]
  tags       Tag[]
  media      Media[]

  @@index([postHash])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid()
  content   String
  userId    String   @map("user_id") @db.Uuid()
  postId    String   @map("post_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [userId], references: [id])

  @@map("comments")
}

model PostHash {
  postHash String @id @unique
  postId   Post?

  @@map("post_hashes")
}

model FlaggedMedia {
  id        String @id @default(uuid()) @db.Uuid()
  mediaHash String @unique

  @@index([mediaHash])
  @@map("flagged_media")
}

model Media {
  id                      String    @id @default(uuid()) @db.Uuid()
  bucket                  String
  domain                  String
  type                    String
  alt                     String?
  filename                String
  size                    Int
  width                   Int
  height                  Int
  kind                    String?
  aspectRatio             Float     @map("aspect_ratio")
  scraped                 Boolean   @default(false)
  category                String?
  deleted                 Boolean   @default(false)
  createdAt               DateTime  @default(now()) @map("created_at")
  hash                    String?
  placeholder             String?
  metadata                Json?
  userMetadata            Json?
  source                  String
  postId                  String?   @db.Uuid()
  post                    Post?     @relation(fields: [postId], references: [id])
  userId                  String    @map("user_id") @db.Uuid()
  user                    Profile?  @relation(fields: [userId], references: [id])
  postFlag                PostFlag? @relation(fields: [postFlagPostId, postFlagFlaggedByUserId], references: [postId, flaggedByUserId])
  postFlagPostId          String?   @db.Uuid()
  postFlagFlaggedByUserId String?   @db.Uuid()

  @@map("media")
}

model PostFlag {
  postId          String     @map("post_id") @db.Uuid()
  flaggedByUserId String     @map("user_id") @db.Uuid()
  reason          FlagReason
  moreInfo        String?    @map("more_info")
  createdAt       DateTime   @default(now()) @map("created_at")
  post            Post       @relation(fields: [postId], references: [id])
  profile         Profile    @relation(fields: [flaggedByUserId], references: [id])
  media           Media[]

  @@id([postId, flaggedByUserId])
  @@map("post_flags")
}

model PostLike {
  postId    String   @map("post_id") @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  doesLike  Boolean  @default(false) @map("does_like")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("post_likes")
}

model Tag {
  id    String @id @default(uuid()) @db.Uuid()
  name  String @unique
  posts Post[]

  @@map("tags")
}

enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table profile {
  id String [pk]
  username String [unique]
  avatarUrl String [unique, default: '']
  bio String [default: '']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime
  banned Boolean [not null, default: false]
  isBot Boolean [not null, default: false]
  comments comments [not null]
  following follows [not null]
  followers follows [not null]
  postFlags post_flags [not null]
  likes post_likes [not null]
  posts posts [not null]
  avatarMediaId media
}

Table follows {
  followerId String [not null]
  folowerAvatarUrl String
  followingId String [not null]
  followingAvatarUrl String
  follower profile [not null]
  following profile [not null]

  indexes {
    (followerId, followingId) [pk]
  }
}

Table posts {
  id String [pk]
  postBody String
  published Boolean [not null, default: true]
  userId String [not null]
  userDeleted Boolean [not null, default: false]
  flagged Boolean [not null, default: false]
  deleted Boolean [not null, default: false]
  flagCount Int [not null, default: 0]
  viewCount Int [not null, default: 0]
  likes Int [not null, default: 0]
  mediaType String
  mediaUrl String [unique]
  mediaId String [not null]
  createdAt DateTime [default: `now()`, not null]
  isBotPost Boolean [not null, default: false]
  isShared Boolean [not null, default: false]
  userAvatarUrl String [not null]
  username String [not null]
  postHash String [unique, not null]
  postHashId PostHash [not null]
  media media [not null]
  profile profile [not null]
  comments comments [not null]
  postFlags post_flags [not null]
  postLikes post_likes [not null]
  tags tag_on_posts [not null]
}

Table comments {
  id String [pk]
  content String [not null]
  userId String [not null]
  postId String [not null]
  createdAt DateTime [default: `now()`, not null]
  post posts [not null]
  profile profile [not null]
}

Table PostHash {
  postHash String [pk, unique]
  postId posts
}

Table flagged_media {
  id String [pk]
  mediaHash String [unique, not null]
}

Table media {
  id String [pk]
  url String [unique, not null]
  bucket String [not null]
  type String [not null]
  alt String
  filename String [not null]
  size Int [not null]
  width Int [not null]
  height Int [not null]
  kind String
  aspectRatio Float [not null]
  scraped Boolean [not null, default: false]
  category String
  deleted Boolean [not null, default: false]
  createdAt DateTime [default: `now()`, not null]
  hash String
  placeholder String
  metadata Json
  userMetadata Json
  source String [not null]
  post posts
  postId String
  avatarMediaId profile
}

Table post_flags {
  postId String [not null]
  flaggedByUserId String [not null]
  reason FlagReason [not null]
  moreInfo String
  createdAt DateTime [default: `now()`, not null]
  post posts [not null]
  profile profile [not null]

  indexes {
    (postId, flaggedByUserId) [pk]
  }
}

Table post_likes {
  postId String [not null]
  userId String [not null]
  createdAt DateTime [default: `now()`, not null]
  doesLike Boolean [not null, default: true]
  post posts [not null]
  profile profile [not null]

  indexes {
    (postId, userId) [pk]
  }
}

Table tag_on_posts {
  postId String [not null]
  tagId String [not null]
  post posts [not null]
  tag tags [not null]

  indexes {
    (postId, tagId) [pk]
  }
}

Table tags {
  id String [pk]
  name String [unique, not null]
  posts tag_on_posts [not null]
}

Enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

Ref: follows.followerId > profile.id

Ref: follows.followingId > profile.id

Ref: posts.postHash - PostHash.postHash

Ref: posts.userId > profile.id

Ref: comments.postId > posts.id [delete: Cascade]

Ref: comments.userId > profile.id

Ref: media.postId > posts.id [delete: Cascade]

Ref: media.url - profile.avatarUrl [delete: Cascade]

Ref: post_flags.postId > posts.id

Ref: post_flags.flaggedByUserId > profile.id

Ref: post_likes.postId > posts.id [delete: Cascade]

Ref: post_likes.userId > profile.id [delete: Cascade]

Ref: tag_on_posts.postId > posts.id [delete: Cascade]

Ref: tag_on_posts.tagId > tags.id [delete: Cascade]
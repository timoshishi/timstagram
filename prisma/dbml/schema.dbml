//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table profiles {
  id String [pk, unique]
  username String [unique, not null]
  avatarUrl String [not null, default: '']
  avatarId String
  avatarBucket String [default: '']
  avatarDomain String [default: '']
  avatarFilename String [unique]
  bio String [not null, default: '']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime
  banned Boolean [not null, default: false]
  isBot Boolean [not null, default: false]
  comments comments [not null]
  followers profiles [not null]
  following profiles [not null]
  postFlags post_flags [not null]
  likes post_likes [not null]
  posts posts [not null]
  mediaId media [not null]
}

Table posts {
  id String [pk]
  postBody String [not null]
  published Boolean [not null, default: true]
  authorId String [not null]
  flagged Boolean [not null, default: false]
  deleted Boolean [not null, default: false]
  flagCount Int [not null, default: 0]
  viewCount Int [not null, default: 1]
  filename String [unique, not null]
  createdAt DateTime [default: `now()`, not null]
  postHash String [unique, not null]
  postHashId post_hashes [not null]
  profile profiles [not null]
  comments comments [not null]
  postFlags post_flags [not null]
  postLikes post_likes [not null]
  tags tags [not null]
  media media [not null]
}

Table comments {
  id String [pk]
  content String [not null]
  userId String [not null]
  postId String [not null]
  createdAt DateTime [default: `now()`, not null]
  post posts [not null]
  profile profiles [not null]
}

Table post_hashes {
  postHash String [pk, unique]
  postId posts
}

Table flagged_media {
  id String [pk]
  mediaHash String [unique, not null]
}

Table media {
  id String [pk]
  url String [unique, not null]
  bucket String [not null]
  domain String [not null]
  type String [not null]
  alt String
  filename String [not null]
  size Int [not null]
  width Int [not null]
  height Int [not null]
  kind String
  aspectRatio Float [not null]
  scraped Boolean [not null, default: false]
  category String
  deleted Boolean [not null, default: false]
  createdAt DateTime [default: `now()`, not null]
  hash String
  placeholder String
  metadata Json
  userMetadata Json
  source String [not null]
  postId String
  post posts
  userId String [not null]
  user profiles
  postFlag post_flags
  postFlagPostId String
  postFlagFlaggedByUserId String
}

Table post_flags {
  postId String [not null]
  flaggedByUserId String [not null]
  reason FlagReason [not null]
  moreInfo String
  createdAt DateTime [default: `now()`, not null]
  post posts [not null]
  profile profiles [not null]
  media media [not null]

  indexes {
    (postId, flaggedByUserId) [pk]
  }
}

Table post_likes {
  postId String [not null]
  userId String [not null]
  createdAt DateTime [default: `now()`, not null]
  doesLike Boolean [not null, default: true]
  post posts [not null]
  profile profiles [not null]

  indexes {
    (postId, userId) [pk]
  }
}

Table tags {
  id String [pk]
  name String [unique, not null]
  posts posts [not null]
}

Table UserFollows {
  followersId String [ref: > profiles.id]
  followingId String [ref: > profiles.id]
}

Table PostToTag {
  tagsId String [ref: > tags.id]
  postsId String [ref: > posts.id]
}

Enum FlagReason {
  ABUSIVE
  ILLEGAL
  COPYRIGHT
  OTHER
}

Ref: posts.postHash - post_hashes.postHash

Ref: posts.authorId > profiles.id

Ref: comments.postId > posts.id [delete: Cascade]

Ref: comments.userId > profiles.id

Ref: media.postId > posts.id

Ref: media.userId > profiles.id

Ref: media.(postFlagPostId, postFlagFlaggedByUserId) > post_flags.(postId, flaggedByUserId)

Ref: post_flags.postId > posts.id

Ref: post_flags.flaggedByUserId > profiles.id

Ref: post_likes.postId > posts.id [delete: Cascade]

Ref: post_likes.userId > profiles.id [delete: Cascade]
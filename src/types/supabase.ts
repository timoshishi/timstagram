/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/post_flags": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_flags.post_id"];
          user_id?: parameters["rowFilter.post_flags.user_id"];
          reason?: parameters["rowFilter.post_flags.reason"];
          content?: parameters["rowFilter.post_flags.content"];
          created_at?: parameters["rowFilter.post_flags.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["post_flags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** post_flags */
          post_flags?: definitions["post_flags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_flags.post_id"];
          user_id?: parameters["rowFilter.post_flags.user_id"];
          reason?: parameters["rowFilter.post_flags.reason"];
          content?: parameters["rowFilter.post_flags.content"];
          created_at?: parameters["rowFilter.post_flags.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_flags.post_id"];
          user_id?: parameters["rowFilter.post_flags.user_id"];
          reason?: parameters["rowFilter.post_flags.reason"];
          content?: parameters["rowFilter.post_flags.content"];
          created_at?: parameters["rowFilter.post_flags.created_at"];
        };
        body: {
          /** post_flags */
          post_flags?: definitions["post_flags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/comments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          content?: parameters["rowFilter.comments.content"];
          user_id?: parameters["rowFilter.comments.user_id"];
          post_id?: parameters["rowFilter.comments.post_id"];
          created_at?: parameters["rowFilter.comments.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["comments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          content?: parameters["rowFilter.comments.content"];
          user_id?: parameters["rowFilter.comments.user_id"];
          post_id?: parameters["rowFilter.comments.post_id"];
          created_at?: parameters["rowFilter.comments.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          content?: parameters["rowFilter.comments.content"];
          user_id?: parameters["rowFilter.comments.user_id"];
          post_id?: parameters["rowFilter.comments.post_id"];
          created_at?: parameters["rowFilter.comments.created_at"];
        };
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/post_likes": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_likes.post_id"];
          user_id?: parameters["rowFilter.post_likes.user_id"];
          created_at?: parameters["rowFilter.post_likes.created_at"];
          doesLike?: parameters["rowFilter.post_likes.doesLike"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["post_likes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** post_likes */
          post_likes?: definitions["post_likes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_likes.post_id"];
          user_id?: parameters["rowFilter.post_likes.user_id"];
          created_at?: parameters["rowFilter.post_likes.created_at"];
          doesLike?: parameters["rowFilter.post_likes.doesLike"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_likes.post_id"];
          user_id?: parameters["rowFilter.post_likes.user_id"];
          created_at?: parameters["rowFilter.post_likes.created_at"];
          doesLike?: parameters["rowFilter.post_likes.doesLike"];
        };
        body: {
          /** post_likes */
          post_likes?: definitions["post_likes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/follows": {
    get: {
      parameters: {
        query: {
          follower_id?: parameters["rowFilter.follows.follower_id"];
          follower_avatar_url?: parameters["rowFilter.follows.follower_avatar_url"];
          following_id?: parameters["rowFilter.follows.following_id"];
          following_avatar_url?: parameters["rowFilter.follows.following_avatar_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["follows"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** follows */
          follows?: definitions["follows"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          follower_id?: parameters["rowFilter.follows.follower_id"];
          follower_avatar_url?: parameters["rowFilter.follows.follower_avatar_url"];
          following_id?: parameters["rowFilter.follows.following_id"];
          following_avatar_url?: parameters["rowFilter.follows.following_avatar_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          follower_id?: parameters["rowFilter.follows.follower_id"];
          follower_avatar_url?: parameters["rowFilter.follows.follower_avatar_url"];
          following_id?: parameters["rowFilter.follows.following_id"];
          following_avatar_url?: parameters["rowFilter.follows.following_avatar_url"];
        };
        body: {
          /** follows */
          follows?: definitions["follows"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profile": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          username?: parameters["rowFilter.profile.username"];
          avatar_url?: parameters["rowFilter.profile.avatar_url"];
          created_at?: parameters["rowFilter.profile.created_at"];
          updated_at?: parameters["rowFilter.profile.updated_at"];
          banned?: parameters["rowFilter.profile.banned"];
          is_bot?: parameters["rowFilter.profile.is_bot"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profile"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          username?: parameters["rowFilter.profile.username"];
          avatar_url?: parameters["rowFilter.profile.avatar_url"];
          created_at?: parameters["rowFilter.profile.created_at"];
          updated_at?: parameters["rowFilter.profile.updated_at"];
          banned?: parameters["rowFilter.profile.banned"];
          is_bot?: parameters["rowFilter.profile.is_bot"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          username?: parameters["rowFilter.profile.username"];
          avatar_url?: parameters["rowFilter.profile.avatar_url"];
          created_at?: parameters["rowFilter.profile.created_at"];
          updated_at?: parameters["rowFilter.profile.updated_at"];
          banned?: parameters["rowFilter.profile.banned"];
          is_bot?: parameters["rowFilter.profile.is_bot"];
        };
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          name?: parameters["rowFilter.tags.name"];
          media_id?: parameters["rowFilter.tags.media_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          name?: parameters["rowFilter.tags.name"];
          media_id?: parameters["rowFilter.tags.media_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          name?: parameters["rowFilter.tags.name"];
          media_id?: parameters["rowFilter.tags.media_id"];
        };
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          post_body?: parameters["rowFilter.posts.post_body"];
          published?: parameters["rowFilter.posts.published"];
          user_id?: parameters["rowFilter.posts.user_id"];
          user_deleted?: parameters["rowFilter.posts.user_deleted"];
          flagged?: parameters["rowFilter.posts.flagged"];
          deleted?: parameters["rowFilter.posts.deleted"];
          flag_count?: parameters["rowFilter.posts.flag_count"];
          view_count?: parameters["rowFilter.posts.view_count"];
          likes?: parameters["rowFilter.posts.likes"];
          media_type?: parameters["rowFilter.posts.media_type"];
          media_url?: parameters["rowFilter.posts.media_url"];
          media_id?: parameters["rowFilter.posts.media_id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          is_bot_post?: parameters["rowFilter.posts.is_bot_post"];
          is_shared?: parameters["rowFilter.posts.is_shared"];
          user_avatar_url?: parameters["rowFilter.posts.user_avatar_url"];
          username?: parameters["rowFilter.posts.username"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          post_body?: parameters["rowFilter.posts.post_body"];
          published?: parameters["rowFilter.posts.published"];
          user_id?: parameters["rowFilter.posts.user_id"];
          user_deleted?: parameters["rowFilter.posts.user_deleted"];
          flagged?: parameters["rowFilter.posts.flagged"];
          deleted?: parameters["rowFilter.posts.deleted"];
          flag_count?: parameters["rowFilter.posts.flag_count"];
          view_count?: parameters["rowFilter.posts.view_count"];
          likes?: parameters["rowFilter.posts.likes"];
          media_type?: parameters["rowFilter.posts.media_type"];
          media_url?: parameters["rowFilter.posts.media_url"];
          media_id?: parameters["rowFilter.posts.media_id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          is_bot_post?: parameters["rowFilter.posts.is_bot_post"];
          is_shared?: parameters["rowFilter.posts.is_shared"];
          user_avatar_url?: parameters["rowFilter.posts.user_avatar_url"];
          username?: parameters["rowFilter.posts.username"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          post_body?: parameters["rowFilter.posts.post_body"];
          published?: parameters["rowFilter.posts.published"];
          user_id?: parameters["rowFilter.posts.user_id"];
          user_deleted?: parameters["rowFilter.posts.user_deleted"];
          flagged?: parameters["rowFilter.posts.flagged"];
          deleted?: parameters["rowFilter.posts.deleted"];
          flag_count?: parameters["rowFilter.posts.flag_count"];
          view_count?: parameters["rowFilter.posts.view_count"];
          likes?: parameters["rowFilter.posts.likes"];
          media_type?: parameters["rowFilter.posts.media_type"];
          media_url?: parameters["rowFilter.posts.media_url"];
          media_id?: parameters["rowFilter.posts.media_id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          is_bot_post?: parameters["rowFilter.posts.is_bot_post"];
          is_shared?: parameters["rowFilter.posts.is_shared"];
          user_avatar_url?: parameters["rowFilter.posts.user_avatar_url"];
          username?: parameters["rowFilter.posts.username"];
        };
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/media": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.media.id"];
          url?: parameters["rowFilter.media.url"];
          bucket?: parameters["rowFilter.media.bucket"];
          type?: parameters["rowFilter.media.type"];
          alt?: parameters["rowFilter.media.alt"];
          size?: parameters["rowFilter.media.size"];
          width?: parameters["rowFilter.media.width"];
          height?: parameters["rowFilter.media.height"];
          aspect_ratio?: parameters["rowFilter.media.aspect_ratio"];
          scraped?: parameters["rowFilter.media.scraped"];
          category?: parameters["rowFilter.media.category"];
          deleted?: parameters["rowFilter.media.deleted"];
          created_at?: parameters["rowFilter.media.created_at"];
          user_id?: parameters["rowFilter.media.user_id"];
          hash?: parameters["rowFilter.media.hash"];
          placeholder?: parameters["rowFilter.media.placeholder"];
          metadata?: parameters["rowFilter.media.metadata"];
          source?: parameters["rowFilter.media.source"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["media"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** media */
          media?: definitions["media"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.media.id"];
          url?: parameters["rowFilter.media.url"];
          bucket?: parameters["rowFilter.media.bucket"];
          type?: parameters["rowFilter.media.type"];
          alt?: parameters["rowFilter.media.alt"];
          size?: parameters["rowFilter.media.size"];
          width?: parameters["rowFilter.media.width"];
          height?: parameters["rowFilter.media.height"];
          aspect_ratio?: parameters["rowFilter.media.aspect_ratio"];
          scraped?: parameters["rowFilter.media.scraped"];
          category?: parameters["rowFilter.media.category"];
          deleted?: parameters["rowFilter.media.deleted"];
          created_at?: parameters["rowFilter.media.created_at"];
          user_id?: parameters["rowFilter.media.user_id"];
          hash?: parameters["rowFilter.media.hash"];
          placeholder?: parameters["rowFilter.media.placeholder"];
          metadata?: parameters["rowFilter.media.metadata"];
          source?: parameters["rowFilter.media.source"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.media.id"];
          url?: parameters["rowFilter.media.url"];
          bucket?: parameters["rowFilter.media.bucket"];
          type?: parameters["rowFilter.media.type"];
          alt?: parameters["rowFilter.media.alt"];
          size?: parameters["rowFilter.media.size"];
          width?: parameters["rowFilter.media.width"];
          height?: parameters["rowFilter.media.height"];
          aspect_ratio?: parameters["rowFilter.media.aspect_ratio"];
          scraped?: parameters["rowFilter.media.scraped"];
          category?: parameters["rowFilter.media.category"];
          deleted?: parameters["rowFilter.media.deleted"];
          created_at?: parameters["rowFilter.media.created_at"];
          user_id?: parameters["rowFilter.media.user_id"];
          hash?: parameters["rowFilter.media.hash"];
          placeholder?: parameters["rowFilter.media.placeholder"];
          metadata?: parameters["rowFilter.media.metadata"];
          source?: parameters["rowFilter.media.source"];
        };
        body: {
          /** media */
          media?: definitions["media"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/post_tags": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_tags.post_id"];
          tag_id?: parameters["rowFilter.post_tags.tag_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["post_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** post_tags */
          post_tags?: definitions["post_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_tags.post_id"];
          tag_id?: parameters["rowFilter.post_tags.tag_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.post_tags.post_id"];
          tag_id?: parameters["rowFilter.post_tags.tag_id"];
        };
        body: {
          /** post_tags */
          post_tags?: definitions["post_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  post_flags: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    post_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    user_id: string;
    /**
     * Format: public."FlagReason"
     * @enum {string}
     */
    reason: "ABUSIVE" | "ILLEGAL" | "COPYRIGHT" | "OTHER";
    /** Format: text */
    content?: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
  };
  _prisma_migrations: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    checksum: string;
    /** Format: timestamp with time zone */
    finished_at?: string;
    /** Format: character varying */
    migration_name: string;
    /** Format: text */
    logs?: string;
    /** Format: timestamp with time zone */
    rolled_back_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    started_at: string;
    /**
     * Format: integer
     * @default 0
     */
    applied_steps_count: number;
  };
  comments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    content: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    user_id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    post_id: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
  };
  post_likes: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    post_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    user_id: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /**
     * Format: boolean
     * @default true
     */
    doesLike: boolean;
  };
  follows: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    follower_id: string;
    /** Format: text */
    follower_avatar_url?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    following_id: string;
    /** Format: text */
    following_avatar_url?: string;
  };
  profile: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /** Format: timestamp without time zone */
    updated_at?: string;
    /**
     * Format: boolean
     * @default false
     */
    banned: boolean;
    /**
     * Format: boolean
     * @default false
     */
    is_bot: boolean;
  };
  tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `media.id`.<fk table='media' column='id'/>
     */
    media_id?: string;
  };
  posts: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    post_body?: string;
    /**
     * Format: boolean
     * @default true
     */
    published: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    user_id: string;
    /**
     * Format: boolean
     * @default false
     */
    user_deleted: boolean;
    /**
     * Format: boolean
     * @default false
     */
    flagged: boolean;
    /**
     * Format: boolean
     * @default false
     */
    deleted: boolean;
    /**
     * Format: integer
     * @default 0
     */
    flag_count: number;
    /**
     * Format: integer
     * @default 0
     */
    view_count: number;
    /**
     * Format: integer
     * @default 0
     */
    likes: number;
    /** Format: text */
    media_type?: string;
    /** Format: text */
    media_url?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `media.id`.<fk table='media' column='id'/>
     */
    media_id: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /**
     * Format: boolean
     * @default false
     */
    is_bot_post: boolean;
    /**
     * Format: boolean
     * @default false
     */
    is_shared: boolean;
    /** Format: text */
    user_avatar_url: string;
    /** Format: text */
    username: string;
  };
  media: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    url: string;
    /** Format: text */
    bucket: string;
    /** Format: text */
    type: string;
    /** Format: text */
    alt?: string;
    /** Format: integer */
    size: number;
    /** Format: integer */
    width: number;
    /** Format: integer */
    height: number;
    /** Format: double precision */
    aspect_ratio: number;
    /**
     * Format: boolean
     * @default false
     */
    scraped: boolean;
    /** Format: text */
    category?: string;
    /**
     * Format: boolean
     * @default false
     */
    deleted: boolean;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    user_id: string;
    /** Format: text */
    hash?: string;
    /** Format: text */
    placeholder?: string;
    /** Format: jsonb */
    metadata?: unknown;
    /** Format: text */
    source: string;
  };
  post_tags: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    post_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tag_id: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description post_flags */
  "body.post_flags": definitions["post_flags"];
  /** Format: text */
  "rowFilter.post_flags.post_id": string;
  /** Format: uuid */
  "rowFilter.post_flags.user_id": string;
  /** Format: public."FlagReason" */
  "rowFilter.post_flags.reason": string;
  /** Format: text */
  "rowFilter.post_flags.content": string;
  /** Format: timestamp without time zone */
  "rowFilter.post_flags.created_at": string;
  /** @description _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  /** Format: character varying */
  "rowFilter._prisma_migrations.id": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.checksum": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.finished_at": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.migration_name": string;
  /** Format: text */
  "rowFilter._prisma_migrations.logs": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.rolled_back_at": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.started_at": string;
  /** Format: integer */
  "rowFilter._prisma_migrations.applied_steps_count": string;
  /** @description comments */
  "body.comments": definitions["comments"];
  /** Format: uuid */
  "rowFilter.comments.id": string;
  /** Format: text */
  "rowFilter.comments.content": string;
  /** Format: uuid */
  "rowFilter.comments.user_id": string;
  /** Format: text */
  "rowFilter.comments.post_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.comments.created_at": string;
  /** @description post_likes */
  "body.post_likes": definitions["post_likes"];
  /** Format: text */
  "rowFilter.post_likes.post_id": string;
  /** Format: uuid */
  "rowFilter.post_likes.user_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.post_likes.created_at": string;
  /** Format: boolean */
  "rowFilter.post_likes.doesLike": string;
  /** @description follows */
  "body.follows": definitions["follows"];
  /** Format: uuid */
  "rowFilter.follows.follower_id": string;
  /** Format: text */
  "rowFilter.follows.follower_avatar_url": string;
  /** Format: uuid */
  "rowFilter.follows.following_id": string;
  /** Format: text */
  "rowFilter.follows.following_avatar_url": string;
  /** @description profile */
  "body.profile": definitions["profile"];
  /** Format: uuid */
  "rowFilter.profile.id": string;
  /** Format: text */
  "rowFilter.profile.username": string;
  /** Format: text */
  "rowFilter.profile.avatar_url": string;
  /** Format: timestamp without time zone */
  "rowFilter.profile.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.profile.updated_at": string;
  /** Format: boolean */
  "rowFilter.profile.banned": string;
  /** Format: boolean */
  "rowFilter.profile.is_bot": string;
  /** @description tags */
  "body.tags": definitions["tags"];
  /** Format: uuid */
  "rowFilter.tags.id": string;
  /** Format: text */
  "rowFilter.tags.name": string;
  /** Format: uuid */
  "rowFilter.tags.media_id": string;
  /** @description posts */
  "body.posts": definitions["posts"];
  /** Format: text */
  "rowFilter.posts.id": string;
  /** Format: text */
  "rowFilter.posts.post_body": string;
  /** Format: boolean */
  "rowFilter.posts.published": string;
  /** Format: uuid */
  "rowFilter.posts.user_id": string;
  /** Format: boolean */
  "rowFilter.posts.user_deleted": string;
  /** Format: boolean */
  "rowFilter.posts.flagged": string;
  /** Format: boolean */
  "rowFilter.posts.deleted": string;
  /** Format: integer */
  "rowFilter.posts.flag_count": string;
  /** Format: integer */
  "rowFilter.posts.view_count": string;
  /** Format: integer */
  "rowFilter.posts.likes": string;
  /** Format: text */
  "rowFilter.posts.media_type": string;
  /** Format: text */
  "rowFilter.posts.media_url": string;
  /** Format: uuid */
  "rowFilter.posts.media_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.posts.created_at": string;
  /** Format: boolean */
  "rowFilter.posts.is_bot_post": string;
  /** Format: boolean */
  "rowFilter.posts.is_shared": string;
  /** Format: text */
  "rowFilter.posts.user_avatar_url": string;
  /** Format: text */
  "rowFilter.posts.username": string;
  /** @description media */
  "body.media": definitions["media"];
  /** Format: uuid */
  "rowFilter.media.id": string;
  /** Format: text */
  "rowFilter.media.url": string;
  /** Format: text */
  "rowFilter.media.bucket": string;
  /** Format: text */
  "rowFilter.media.type": string;
  /** Format: text */
  "rowFilter.media.alt": string;
  /** Format: integer */
  "rowFilter.media.size": string;
  /** Format: integer */
  "rowFilter.media.width": string;
  /** Format: integer */
  "rowFilter.media.height": string;
  /** Format: double precision */
  "rowFilter.media.aspect_ratio": string;
  /** Format: boolean */
  "rowFilter.media.scraped": string;
  /** Format: text */
  "rowFilter.media.category": string;
  /** Format: boolean */
  "rowFilter.media.deleted": string;
  /** Format: timestamp without time zone */
  "rowFilter.media.created_at": string;
  /** Format: uuid */
  "rowFilter.media.user_id": string;
  /** Format: text */
  "rowFilter.media.hash": string;
  /** Format: text */
  "rowFilter.media.placeholder": string;
  /** Format: jsonb */
  "rowFilter.media.metadata": string;
  /** Format: text */
  "rowFilter.media.source": string;
  /** @description post_tags */
  "body.post_tags": definitions["post_tags"];
  /** Format: text */
  "rowFilter.post_tags.post_id": string;
  /** Format: uuid */
  "rowFilter.post_tags.tag_id": string;
}

export interface operations {}

export interface external {}

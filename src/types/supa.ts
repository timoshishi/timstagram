/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/hashTags': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.hashTags.id'];
          created_at?: parameters['rowFilter.hashTags.created_at'];
          images?: parameters['rowFilter.hashTags.images'];
          popularity?: parameters['rowFilter.hashTags.popularity'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['hashTags'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** hashTags */
          hashTags?: definitions['hashTags'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.hashTags.id'];
          created_at?: parameters['rowFilter.hashTags.created_at'];
          images?: parameters['rowFilter.hashTags.images'];
          popularity?: parameters['rowFilter.hashTags.popularity'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.hashTags.id'];
          created_at?: parameters['rowFilter.hashTags.created_at'];
          images?: parameters['rowFilter.hashTags.images'];
          popularity?: parameters['rowFilter.hashTags.popularity'];
        };
        body: {
          /** hashTags */
          hashTags?: definitions['hashTags'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/profile': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profile.id'];
          created_at?: parameters['rowFilter.profile.created_at'];
          updated_at?: parameters['rowFilter.profile.updated_at'];
          email?: parameters['rowFilter.profile.email'];
          username?: parameters['rowFilter.profile.username'];
          avatarURL?: parameters['rowFilter.profile.avatarURL'];
          following?: parameters['rowFilter.profile.following'];
          followers?: parameters['rowFilter.profile.followers'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['profile'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profile */
          profile?: definitions['profile'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profile.id'];
          created_at?: parameters['rowFilter.profile.created_at'];
          updated_at?: parameters['rowFilter.profile.updated_at'];
          email?: parameters['rowFilter.profile.email'];
          username?: parameters['rowFilter.profile.username'];
          avatarURL?: parameters['rowFilter.profile.avatarURL'];
          following?: parameters['rowFilter.profile.following'];
          followers?: parameters['rowFilter.profile.followers'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profile.id'];
          created_at?: parameters['rowFilter.profile.created_at'];
          updated_at?: parameters['rowFilter.profile.updated_at'];
          email?: parameters['rowFilter.profile.email'];
          username?: parameters['rowFilter.profile.username'];
          avatarURL?: parameters['rowFilter.profile.avatarURL'];
          following?: parameters['rowFilter.profile.following'];
          followers?: parameters['rowFilter.profile.followers'];
        };
        body: {
          /** profile */
          profile?: definitions['profile'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/image': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.image.id'];
          created_at?: parameters['rowFilter.image.created_at'];
          hash?: parameters['rowFilter.image.hash'];
          created_by?: parameters['rowFilter.image.created_by'];
          like_count?: parameters['rowFilter.image.like_count'];
          liked_by?: parameters['rowFilter.image.liked_by'];
          userAvatar?: parameters['rowFilter.image.userAvatar'];
          hashTags?: parameters['rowFilter.image.hashTags'];
          comments?: parameters['rowFilter.image.comments'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['image'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** image */
          image?: definitions['image'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.image.id'];
          created_at?: parameters['rowFilter.image.created_at'];
          hash?: parameters['rowFilter.image.hash'];
          created_by?: parameters['rowFilter.image.created_by'];
          like_count?: parameters['rowFilter.image.like_count'];
          liked_by?: parameters['rowFilter.image.liked_by'];
          userAvatar?: parameters['rowFilter.image.userAvatar'];
          hashTags?: parameters['rowFilter.image.hashTags'];
          comments?: parameters['rowFilter.image.comments'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.image.id'];
          created_at?: parameters['rowFilter.image.created_at'];
          hash?: parameters['rowFilter.image.hash'];
          created_by?: parameters['rowFilter.image.created_by'];
          like_count?: parameters['rowFilter.image.like_count'];
          liked_by?: parameters['rowFilter.image.liked_by'];
          userAvatar?: parameters['rowFilter.image.userAvatar'];
          hashTags?: parameters['rowFilter.image.hashTags'];
          comments?: parameters['rowFilter.image.comments'];
        };
        body: {
          /** image */
          image?: definitions['image'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  hashTags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `image.hash`.<fk table='image' column='hash'/>
     * @default
     */
    images?: string;
    /** Format: bigint */
    popularity?: number;
  };
  /** @description user-profile */
  profile: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    email: string;
    /** Format: character varying */
    username: string;
    /** Format: character varying */
    avatarURL: string;
    /** Format: ARRAY */
    following: unknown[];
    /** Format: ARRAY */
    followers: unknown[];
  };
  image: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: character varying */
    hash: string;
    /** Format: uuid */
    created_by: string;
    /** Format: bigint */
    like_count: number;
    /** Format: json */
    liked_by: unknown;
    /** Format: uuid */
    userAvatar: string;
    /** Format: ARRAY */
    hashTags: unknown[];
    /** Format: ARRAY */
    comments: unknown[];
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description hashTags */
  'body.hashTags': definitions['hashTags'];
  /** Format: uuid */
  'rowFilter.hashTags.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.hashTags.created_at': string;
  /** Format: character varying */
  'rowFilter.hashTags.images': string;
  /** Format: bigint */
  'rowFilter.hashTags.popularity': string;
  /** @description profile */
  'body.profile': definitions['profile'];
  /** Format: uuid */
  'rowFilter.profile.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.profile.created_at': string;
  /** Format: timestamp with time zone */
  'rowFilter.profile.updated_at': string;
  /** Format: character varying */
  'rowFilter.profile.email': string;
  /** Format: character varying */
  'rowFilter.profile.username': string;
  /** Format: character varying */
  'rowFilter.profile.avatarURL': string;
  /** Format: ARRAY */
  'rowFilter.profile.following': string;
  /** Format: ARRAY */
  'rowFilter.profile.followers': string;
  /** @description image */
  'body.image': definitions['image'];
  /** Format: character varying */
  'rowFilter.image.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.image.created_at': string;
  /** Format: character varying */
  'rowFilter.image.hash': string;
  /** Format: uuid */
  'rowFilter.image.created_by': string;
  /** Format: bigint */
  'rowFilter.image.like_count': string;
  /** Format: json */
  'rowFilter.image.liked_by': string;
  /** Format: uuid */
  'rowFilter.image.userAvatar': string;
  /** Format: ARRAY */
  'rowFilter.image.hashTags': string;
  /** Format: ARRAY */
  'rowFilter.image.comments': string;
}

export interface operations {}

export interface external {}
